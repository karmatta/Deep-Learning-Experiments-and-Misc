
#########################################
# TO INSTALL OPENCV ON UBUNTU OR DEBIAN #
#########################################

# | Ubuntu 16.04.2 | OpenCV 3.4.0 | OpenCV_contrib 3.4.0 | OK   | 4 June 2018|

# 1. KEEP UBUNTU OR DEBIAN UP TO DATE

sudo apt-get -y update
sudo apt-get -y upgrade
# uncomment the line below for upgrading OS
# sudo apt-get -y dist-upgrade 
sudo apt-get -y autoremove


# 2. INSTALL THE DEPENDENCIES

# Remove any previous installations of x264
sudo apt-get remove x264 libx264-dev

# Build tools:
sudo apt-get install -y build-essential checkinstall cmake pkg-config yasm

# install git and fortran compiler
sudo apt-get install -y git gfortran

# GUI (if you want to use GTK instead of Qt, replace 'qt5-default' with 'libgtkglext1-dev' and remove '-DWITH_QT=ON' option in CMake):
sudo apt-get install -y qt5-default libvtk6-dev libgtk2.0-dev libtbb-dev

# Media I/O:
sudo apt-get install -y zlib1g-dev libjpeg8-dev libwebp-dev libpng12-dev libtiff5-dev libjasper-dev libopenexr-dev libgdal-dev

# Video I/O:
sudo apt-get install -y libdc1394-22-dev libavcodec-dev libavformat-dev libswscale-dev libtheora-dev libvorbis-dev libxvidcore-dev libx264-dev yasm libopencore-amrnb-dev libopencore-amrwb-dev libv4l-dev libxine2-dev

# install Gstreamer
sudo apt-get install -y libgstreamer0.10-dev libgstreamer-plugins-base0.10-dev

# install additional dependencies
sudo apt-get install -y libatlas-base-dev
sudo apt-get install -y libfaac-dev libmp3lame-dev

# Parallelism and linear algebra libraries:
sudo apt-get install -y libtbb-dev libeigen3-dev

# Python: not needed if conda is installed 
# sudo apt-get install -y python-dev python-tk python-numpy python3-dev python3-tk python3-numpy

# Java:
sudo apt-get install -y ant default-jdk

# Documentation:
sudo apt-get install -y doxygen

# Optional dependencies
sudo apt-get install -y libprotobuf-dev protobuf-compiler
sudo apt-get install -y libgoogle-glog-dev libgflags-dev


# 3. INSTALL THE LIBRARY (YOU CAN CHANGE '3.2.0' FOR THE LAST STABLE VERSION)

sudo apt-get install -y unzip wget


### cloning and installing opencv from github ###

mkdir OpenCV
cd OpenCV

git clone https://github.com/opencv/opencv.git
cd opencv 
git checkout 3.3.1 # replace 3.3.1 with 3.4.0 for that version
cd ..

### cloning and installing opencv_contrib modules from github ###

git clone https://github.com/opencv/opencv_contrib.git
cd opencv_contrib
git checkout 3.3.1 # replace 3.3.1 with 3.4.0 for that version
cd ..


# It is better to manually install line-by line from this point onwards
# delete any module from the opencv_contrib which throws an error while compiling

cd opencv
mkdir build
cd build

# Run CMake

cmake -D CMAKE_BUILD_TYPE=RELEASE \
      -D CMAKE_INSTALL_PREFIX=$(python -c "import sys; print(sys.prefix)") \
      -D PYTHON_EXECUTABLE=$(which python) \
      -D PYTHON_INCLUDE_DIR=$(python -c "from distutils.sysconfig import get_python_inc; print(get_python_inc())") \
 	  -D PYTHON_PACKAGES_PATH=$(python3 -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())") \
      -D INSTALL_C_EXAMPLES=ON \
      -D INSTALL_PYTHON_EXAMPLES=ON \
      -D WITH_TBB=ON \
      -D WITH_V4L=ON \
      -D WITH_QT=ON \
      -D WITH_OPENGL=ON \
      -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules \
      -D ENABLE_PRECOMPILED_HEADERS=OFF \
      -D BUILD_NEW_PYTHON_SUPPORT=ON \
      -D BUILD_EXAMPLES=ON ..

##### manually run each command from this point ###

# find out number of CPU cores in your machine

nproc

# substitute 4 by output of nproc

make -j4
sudo make install
sudo sh -c 'echo $(python -c "import sys; print(sys.prefix)") >> /etc/ld.so.conf.d/opencv.conf'
sudo ldconfig

# The final step is to sym-link our OpenCV cv2.so 
# bindings into our virtual environment where you
# wanna use cv2

# After running sudo make install , 
# your OpenCV + Python 3 bindings 
# should be located in 
# /home/affine/anaconda3/lib/python3.6/site-packages
# cd into the folder where you have installed it and
# run this command to link it to python env.

cd /home/affine/anaconda3/lib/python3.6/site-packages
ln -s /home/affine/anaconda3/lib/python3.6/site-packages/cv2.so cv2.so

# You may link this to any environment 
# to call import cv2 from that env. 
# cv2 binding should work seemlessly from now.
